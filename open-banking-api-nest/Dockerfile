# =============================================
# üèóÔ∏è EST√ÅGIO DE CONSTRU√á√ÉO (builder)
# =============================================
FROM node:20-alpine AS builder

WORKDIR /app

# 1Ô∏è‚É£ Copia arquivos de configura√ß√£o e instala depend√™ncias
COPY package.json yarn.lock tsconfig.json nest-cli.json ./

# 2Ô∏è‚É£ Instala depend√™ncias de build
RUN apk add --no-cache python3 make g++ postgresql-client git

# 3Ô∏è‚É£ Instala depend√™ncias do projeto
RUN yarn install --frozen-lockfile --network-timeout 1000000

# 4Ô∏è‚É£ Copia todo o c√≥digo fonte
COPY . .

# 5Ô∏è‚É£ Configura script wait-for-db (opcional)
RUN mkdir -p scripts && \
    echo '#!/bin/sh' > ./scripts/wait-for-db && \
    echo 'echo "PostgreSQL est√° pronto!"' >> ./scripts/wait-for-db && \
    echo 'exec "$@"' >> ./scripts/wait-for-db && \
    chmod +x ./scripts/wait-for-db

# 6Ô∏è‚É£ Build da aplica√ß√£o
RUN yarn build && \
    mkdir -p dist/migrations && \
    cp -r migrations/* dist/migrations/ 2>/dev/null || :

# =============================================
# üöÄ EST√ÅGIO DE PRODU√á√ÉO
# =============================================
FROM node:20-alpine

WORKDIR /app

# 7Ô∏è‚É£ Instala depend√™ncias de runtime
RUN apk add --no-cache postgresql-client bash curl

# 8Ô∏è‚É£ Copia artefatos do builder
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package.json ./
COPY --from=builder /app/scripts ./scripts/

# 9Ô∏è‚É£ Configura permiss√µes
RUN chmod +x /app/scripts/wait-for-db && \
    chown -R node:node /app

USER node

# üîü Vari√°veis de ambiente
ENV NODE_ENV=development \
    PORT=3000 \
    DB_HOST=db \
    DB_PORT=5432 \
    DB_USER=postgres \
    DB_PASSWORD=senhasegura \
    DB_NAME=open_banking \
    CORS_ORIGIN=* \
    API_PREFIX=api/v1

EXPOSE 3000

# üèÅ Comando de inicializa√ß√£o
CMD ["sh", "-c", "/app/scripts/wait-for-db && node /app/dist/src/main.js"]